@page "/"
@using System.Text
@inject IDemoService demoService
@rendermode InteractiveServer

<PageTitle>
    Azure Cosmos DB for NoSQL | .NET Quickstart
</PageTitle>

<pre class="bg-light text-dark fw-light font-monospace mt-5 p-2">
    @ConsoleText
</pre>

<section class="d-flex justify-content-center">
    <div class="list-group py-2">
    <button type="button" class="list-group-item list-group-item-action @(RunAgainEnabled ? "" : "disabled") active" aria-current="true" @onclick="RunAgainAsync">
        <i class="bi bi-arrow-clockwise me-2"></i>
        Restart
    </button>
        <a href="https://learn.microsoft.com/azure/cosmos-db/nosql/quickstart-dotnet#code-examples" class="list-group-item list-group-item-action" target="_blank">
            <i class="bi bi-book me-2"></i>
            Walk through the code for this sample application
            <small class="ms-1 align-top">
                <i class="bi bi-box-arrow-up-right" style="font-size: 0.65rem;"></i>
            </small>
        </a>
        <a href="https://learn.microsoft.com/azure/cosmos-db/nosql/" class="list-group-item list-group-item-action" target="_blank">
            <i class="bi bi-lightbulb me-2"></i>
            Learn more about Azure Cosmos DB for NoSQL
            <small class="ms-1 align-top">
                <i class="bi bi-box-arrow-up-right" style="font-size: 0.65rem;"></i>
            </small>
        </a>
    </div>
</section>

<footer class="fixed-bottom bg-secondary bg-body-secondary border">
    <small class="px-5 fw-light fst-italic">
        <strong>
            ENDPOINT:
        </strong>
        @demoService.GetEndpoint()
    </small>
</footer>

@code {
    private StringBuilder _console = new();

    private string ConsoleText
    {
        get => _console.ToString();
    }

    private bool RunAgainEnabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GenerateQueryDataAsync();
    }

    private async Task RunAgainAsync()
    {
        await GenerateQueryDataAsync();
    }

    private async Task GenerateQueryDataAsync()
    {
        await SetRunAgain(false);
        await ClearConsoleAsync();

        await WriteToConsoleAync("Current Status:\tStarting...");

        await demoService.RunAsync(writeOutputAync: WriteToConsoleAync);

        await WriteToConsoleAync("Current Status:\tStopping...");
        await SetRunAgain(true);
    }

    private async Task WriteToConsoleAync(string message)
    {
        _console.AppendLine(message);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ClearConsoleAsync()
    {
        _console.Clear();
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetRunAgain(bool state)
    {
        RunAgainEnabled = state;
        await InvokeAsync(StateHasChanged);
    }
}

