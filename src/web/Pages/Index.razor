@page "/"
@inject CosmosClient client
@using System.Text

<pre class="bg-light text-dark fw-light font-monospace mt-5 p-2">
    @_console.ToString()
</pre>

<section class="d-flex justify-content-center">
    <div class="list-group py-2">
    <button type="button" class="list-group-item list-group-item-action @(_runAgainEnabled ? "" : "disabled") active" aria-current="true" @onclick="RunAgain">
        <i class="bi bi-arrow-clockwise me-2"></i>
        Run again
    </button>
        <a href="https://learn.microsoft.com/azure/cosmos-db/nosql/quickstart-dotnet#walk-through-the-net-library-code" class="list-group-item list-group-item-action" target="_blank">
            <i class="bi bi-book me-2"></i>
            Walk through the code for this sample application
            <small class="ms-1 align-top">            
                <i class="bi bi-box-arrow-up-right" style="font-size: 0.65rem;"></i>
            </small>
        </a>
        <a href="https://learn.microsoft.com/azure/cosmos-db/nosql/" class="list-group-item list-group-item-action" target="_blank">
            <i class="bi bi-lightbulb me-2"></i>
            Learn more about Azure Cosmos DB for NoSQL
            <small class="ms-1 align-top">            
                <i class="bi bi-box-arrow-up-right" style="font-size: 0.65rem;"></i>
            </small>
        </a>
    </div>
</section>

<footer class="fixed-bottom bg-secondary bg-body-secondary border">
    <small class="px-5 fw-light fst-italic">
        <strong>
            ENDPOINT:
        </strong>
        @client.Endpoint
    </small>
</footer>

@code {
    private StringBuilder _console = new();

    private bool _runAgainEnabled = false;

    protected override void OnInitialized() => GenerateQueryDataAsync();

    private void RunAgain() => GenerateQueryDataAsync();

    private async void GenerateQueryDataAsync()
    {
        await SetRunAgain(false);
        await ClearConsoleAsync();

        await WriteToConsoleAync("Current Status:\tStarting...");

        // <get_database>
        Database database = client.GetDatabase("cosmicworks");
        // </get_database>
        database = await database.ReadAsync();
        await WriteToConsoleAync($"Get database:\t{database.Id}");

        // <get_container>
        Container container = database.GetContainer("products");
        // </get_container>
        container = await container.ReadContainerAsync();   
        await WriteToConsoleAync($"Get container:\t{container.Id}");

        {
            // <create_item>
            Product item = new(
                id: "68719518391",
                category: "gear-surf-surfboards",
                name: "Yamba Surfboard",
                quantity: 12,
                price: 850.00m,
                clearance: false
            );

            ItemResponse<Product> response = await container.UpsertItemAsync<Product>(
                item: item,
                partitionKey: new PartitionKey("gear-surf-surfboards")
            );
            // </create_item>            
            await WriteToConsoleAync($"Upserted item:\t{response.Resource}");
            await WriteToConsoleAync($"Status code:\t{response.StatusCode}");
            await WriteToConsoleAync($"Request charge:\t{response.RequestCharge:0.00}");
        }

        {
            Product item = new(
                id: "68719518371",
                category: "gear-surf-surfboards",
                name: "Kiama Classic Surfboard",
                quantity: 25,
                price: 790.00m,
                clearance: false
            );

            ItemResponse<Product> response = await container.UpsertItemAsync<Product>(
                item: item,
                partitionKey: new PartitionKey("gear-surf-surfboards")
            );
            await WriteToConsoleAync($"Upserted item:\t{response.Resource}");
            await WriteToConsoleAync($"Status code:\t{response.StatusCode}");
            await WriteToConsoleAync($"Request charge:\t{response.RequestCharge:0.00}");
        }

        {
            // <read_item>
            ItemResponse<Product> response = await container.ReadItemAsync<Product>(
                id: "68719518391",
                partitionKey: new PartitionKey("gear-surf-surfboards")
            );
            // </read_item>
            await WriteToConsoleAync($"Read item id:\t{response.Resource.id}");
            await WriteToConsoleAync($"Read item:\t{response.Resource}");
            await WriteToConsoleAync($"Status code:\t{response.StatusCode}");
            await WriteToConsoleAync($"Request charge:\t{response.RequestCharge:0.00}");
        }

        {
            // <query_items>
            var query = new QueryDefinition(
                query: "SELECT * FROM products p WHERE p.category = @category"
            )
                .WithParameter("@category", "gear-surf-surfboards");

            using FeedIterator<Product> feed = container.GetItemQueryIterator<Product>(
                queryDefinition: query
            );
            // </query_items>
            await WriteToConsoleAync($"Ran query:\t{query.QueryText}");

            // <parse_results>
            List<Product> items = new();
            double requestCharge = 0d;
            while (feed.HasMoreResults)
            {
                FeedResponse<Product> response = await feed.ReadNextAsync();
                foreach (Product item in response)
                {
                    items.Add(item);
                }
                requestCharge += response.RequestCharge;
            }
            // </parse_results>

            foreach(var item in items)
            {
                await WriteToConsoleAync($"Found item:\t{item.name}\t[{item.id}]");
            }
            await WriteToConsoleAync($"Request charge:\t{requestCharge:0.00}");
        }

        await WriteToConsoleAync("Current Status:\tStopping...");
        await SetRunAgain(true);

        async Task WriteToConsoleAync(string message)
        {
            _console.AppendLine(message);
            await InvokeAsync(StateHasChanged);
            await Task.Delay(TimeSpan.FromSeconds(0.75));
        }

        async Task ClearConsoleAsync()
        {
            _console.Clear();
            await InvokeAsync(StateHasChanged);
        }

        async Task SetRunAgain(bool state)
        {
            _runAgainEnabled = state;
            await InvokeAsync(StateHasChanged);
        }
    }
}
